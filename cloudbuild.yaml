timeout: 1200s
options:
  logging: CLOUD_LOGGING_ONLY

steps:
  - id: 'Prepare and Test'
    name: 'node:18-alpine'
    entrypoint: 'sh'
    secretEnv: ['AWS_ACCESS_KEY_ID_GL', 'AWS_SECRET_KEY_ID_GL']
    args:
      - '-c'
      - |
        pwd

        # Install the AWS CLI
        apk add --no-cache aws-cli

        # Configure the AWS CLI
        aws configure set aws_access_key_id "$$AWS_ACCESS_KEY_ID_GL"
        aws configure set aws_secret_access_key "$$AWS_SECRET_KEY_ID_GL"
        aws configure set region us-east-1

        # Login to AWS CodeArtifact
        aws codeartifact login --tool npm --repository node --domain demo --region us-east-1
        # Run the tests
        #[ -f package-lock.json ] && rm package-lock.json
        #npm install -f
        # npm test -- --coverage

        

  - id: 'Sonarqube Scan'
    name: 'sonarsource/sonar-scanner-cli'
    args:
      - '-Dsonar.projectKey=audit-service'
      - '-Dsonar.sources=src'
      - '-Dsonar.host.url=https://sonarqube.dandsltd.com/'
      - '-Dsonar.login=${_SONAR_TOKEN}'
      - '-Dsonar.exclusions=src/common/constants/swagger-response.constant.ts,**/node_modules/**,**/dist/**'
      - '-Dsonar.javascript.lcov.reportPaths=/workspace/coverage_unit/lcov.info,coverage_e2e/lcov.info'



  - id: 'Build Docker Image'
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    secretEnv: ['AWS_ACCESS_KEY_ID_GL', 'AWS_SECRET_KEY_ID_GL']
    args:
      - '-c'
      - |
        docker build \
          --build-arg AWS_ACCESS_KEY_ID_GL=$$AWS_ACCESS_KEY_ID_GL \
          --build-arg AWS_SECRET_KEY_ID_GL=$$AWS_SECRET_KEY_ID_GL \
          -t us-central1-docker.pkg.dev/dandsltd-dev/o2c-audit/$REPO_NAME:${SHORT_SHA} \
          .

        if [[ "$BRANCH_NAME" == "develop" ]]; then
          TAG="dev-latest"
        elif [[ "$BRANCH_NAME" == "release-qa" ]]; then
          TAG="qa-latest"
        elif [[ "$BRANCH_NAME" == "release/uat" ]]; then
          TAG="uat-latest"
        else
          TAG=""
        fi

        if [[ -n "$$TAG" ]]; then
          docker tag us-central1-docker.pkg.dev/dandsltd-dev/o2c-audit/$REPO_NAME:${SHORT_SHA} \
            us-central1-docker.pkg.dev/dandsltd-dev/o2c-audit/$REPO_NAME:$$TAG
        fi

  - id: 'Trivy Scan'
    name: 'aquasec/trivy:0.44.0'
    args:
      - 'image'
      - '--severity'
      - 'HIGH,CRITICAL'
      - 'us-central1-docker.pkg.dev/dandsltd-dev/o2c-audit/$REPO_NAME:${SHORT_SHA}'
    waitFor: ['Build Docker Image']

  - id: 'Push'
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        docker push us-central1-docker.pkg.dev/dandsltd-dev/o2c-audit/$REPO_NAME:${SHORT_SHA}

        if [[ "$BRANCH_NAME" == "develop" ]]; then
          TAG="dev-latest"
        elif [[ "$BRANCH_NAME" == "release-qa" ]]; then
          TAG="qa-latest"
        elif [[ "$BRANCH_NAME" == "release/uat" ]]; then
          TAG="uat-latest"
        else
          TAG=""
        fi

        if [[ -n "$$TAG" ]]; then
          docker push us-central1-docker.pkg.dev/dandsltd-dev/o2c-audit/$REPO_NAME:$$TAG
        fi

  - id: 'Authenticate GKE Cluster'
    name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'container'
      - 'clusters'
      - 'get-credentials'
      - '${_CLUSTER_NAME}'
      - '--region'
      - '${_COMPUTE_REGION}'
      - '--project'
      - '${PROJECT_ID}'

  - id: 'Deploy to Develop'
    name: 'gcr.io/cloud-builders/kubectl'
    env:
      - 'CLOUDSDK_COMPUTE_REGION=${_COMPUTE_REGION}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLUSTER_NAME}'
    waitFor: ['Push', 'Authenticate GKE Cluster']
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [[ "$BRANCH_NAME" == "develop" ]]; then
          echo "Deploying to develop namespace"
          kubectl config set-context --current --namespace=develop
          kubectl set image deployment/${_DEPLOYMENT_NAME} ${_CONTAINER_NAME}=us-central1-docker.pkg.dev/dandsltd-dev/o2c-audit/$REPO_NAME:${SHORT_SHA}
        else
          echo "Skipping develop deployment for branch $BRANCH_NAME"
        fi

  - id: 'Deploy to QA'
    name: 'gcr.io/cloud-builders/kubectl'
    env:
      - 'CLOUDSDK_COMPUTE_REGION=${_COMPUTE_REGION}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLUSTER_NAME}'
    waitFor: ['Push', 'Authenticate GKE Cluster']
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [[ "$BRANCH_NAME" == "release-qa" ]]; then
          echo "Deploying to qa namespace"
          kubectl config set-context --current --namespace=qa
          kubectl set image deployment/${_DEPLOYMENT_NAME} ${_CONTAINER_NAME}=us-central1-docker.pkg.dev/dandsltd-dev/o2c-audit/$REPO_NAME:${SHORT_SHA}
        else
          echo "Skipping qa deployment for branch $BRANCH_NAME"
        fi

  - id: 'Deploy to Production'
    name: 'gcr.io/cloud-builders/kubectl'
    env:
      - 'CLOUDSDK_COMPUTE_REGION=${_COMPUTE_REGION}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLUSTER_NAME}'
    waitFor: ['Push', 'Authenticate GKE Cluster']
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [[ "$BRANCH_NAME" == "release/uat" ]]; then
          echo "Deploying to uat namespace"
          kubectl config set-context --current --namespace=uat
          kubectl set image deployment/${_DEPLOYMENT_NAME} ${_CONTAINER_NAME}=us-central1-docker.pkg.dev/dandsltd-dev/o2c-audit/$REPO_NAME:${SHORT_SHA}
        else
          echo "Skipping uat deployment for branch $BRANCH_NAME"
        fi

availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_ID/secrets/AWS-ACCESS-KEY-ID-GL/versions/latest
      env: 'AWS_ACCESS_KEY_ID_GL'
    - versionName: projects/$PROJECT_ID/secrets/AWS-SECRET-KEY-ID-GL/versions/latest
      env: 'AWS_SECRET_KEY_ID_GL'
